#!/bin/bash

usage()
{
  cat << EOF
 Usage: $0 -s SIZE -i IMAGE -n HOSTNAME [-t TARGET_DIR]
  -n HOSTNAME   set hostname for this SD image
  -i IMAGE      original image to use for cloning and preparation
  -s SIZE       final size of image

Customize and expand a Hypriot image to run under qemu

OPTIONS:
  -t TARGET_DIR directory to store generated image
  -h            show this message
  
EOF
  exit 1
}

while getopts "hs:i:n:t:" opt; do
  case $opt in
    i)  image="$OPTARG" ;;
    s)  size="$OPTARG" ;;
	n)	hostname="$OPTARG" ;;
	t)	TARGET_DIR="$OPTARG" ;;
	h) 	usage ;;
    \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
    :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
    *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done

#shift $(($OPTIND - 1))

if [ "$image" == "" ] #&& [[ -d $1 ]]
then
    echo "-i must be used to set which image to run" >&2
    usage
fi

if [[ "$size" == "" ]]
then
    echo "-s must be used to define kernel to run image" >&2
    usage
fi

if [[ "$hostname" == "" ]]
then
    echo "-n must be used to define hostname" >&2
    usage
fi

if [[ "$TARGET_DIR" == "" ]]
then
    TARGET_DIR=$(realpath $(dirname ${image}))
fi

if [ ! -f ${image} ]; then
	echo "Image file \"$image\" does not exist"
	usage
fi

function generate_copy(){
	image=$1
	container_name=$2
	filename=$(basename "$1")
	extension="${filename##*.}"
	filename="${filename%.*}"
	container_img=${TARGET_DIR}/${filename}-${container_name}.${extension}
	cp $image $container_img
	echo $container_img
}

# size=$(numfmt --from=iec ${size})

function resize_img(){
	CUR_SIZE=$(stat -c%s $1)
	size=$(numfmt --from=iec $2)
	echo resizing $1 to $size
	if [ $CUR_SIZE -ge $size ]; then 
		echo "original size ${CUR_SIZE}, already >= $2, no need expand"
		false
	else
		truncate --size=$2 $1
	fi
}

function expand_partition2(){
	fdisk $1 <<-EOF
d
2
n







w
EOF

}

function check_partition2_filesystem(){
	unloop_sda2_from_img > /dev/null 2>&1
	loop_sda2_from_img $1
	e2fsck -fp /dev/loop0
	unloop_sda2_from_img
}

function expand_partition2_filesystem(){
	unloop_sda2_from_img > /dev/null 2>&1
	loop_sda2_from_img $1
	resize2fs /dev/loop0
	unloop_sda2_from_img
}

function loop_sda2_from_img(){
	IMAGE=$1
	extension="${IMAGE##*.}"
	PART2_OFFSET=$(fdisk -l $IMAGE | grep ${extension}2 | awk '{ print $2}')
	PART2_OFFSET=$(( $PART2_OFFSET * 512 ))
	losetup -o $PART2_OFFSET /dev/loop0 $IMAGE
}

function loop_boot_from_img(){
	unloop_boot_from_img > /dev/null 2>&1
	IMAGE=$1
	extension="${IMAGE##*.}"
	PART1_OFFSET=$(fdisk -l $IMAGE | grep ${extension}1 | awk '{ print $2}')
	PART1_OFFSET=$(( $PART1_OFFSET * 512 ))
	losetup -o $PART1_OFFSET /dev/loop1 $IMAGE
}

function unloop_sda2_from_img(){
	losetup -d /dev/loop0
}

function unloop_boot_from_img(){
	losetup -d /dev/loop1
}

function prepare_for_qemu(){
	unloop_sda2_from_img > /dev/null 2>&1
	loop_sda2_from_img $1
	
	MOUNT=/tmp/mnt_sda2
	mkdir $MOUNT
	mount /dev/loop0 $MOUNT
	
	# Remove original preload file
	if [ -f $MOUNT/etc/ld.so.preload ]; then
		cp $MOUNT/etc/ld.so.{,.old}
		sed -i -e 's/^/#/' $MOUNT/etc/ld.so.preload
	fi

	cp $MOUNT/etc/modules-load.d/modules.conf{,.old}
	sed -i -e 's/^snd_bcm/#snd_bcmx/' $MOUNT/etc/modules-load.d/modules.conf
	
	mkdir -p $MOUNT/etc/udev/rules.d/
	touch $MOUNT/etc/udev/rules.d/90-qemu.rules
	echo 'KERNEL=="sda", SYMLINK+="mmcblk0"' >> $MOUNT/etc/udev/rules.d/90-qemu.rules
	echo 'KERNEL=="sda?", SYMLINK+="mmcblk0p%n"' >> $MOUNT/etc/udev/rules.d/90-qemu.rules
	echo 'KERNEL=="sda2", SYMLINK+="root"' >> $MOUNT/etc/udev/rules.d/90-qemu.rules

	umount $MOUNT
	unloop_sda2_from_img
}

function customize_boot_config(){
	img=$1
	hostname=$2
	SD_HOSTNAME=$hostname
	loop_boot_from_img "${img}"
	dev=/dev/loop1
	boot=/tmp/mnt_boot
	mkdir $boot
	# FS_TYPE=$(sudo blkid -o value -s TYPE "${dev}" || echo vfat)
	# mount -t ${FS_TYPE} "${dev}" "${boot}"
	mount "${dev}" "${boot}"

	if [ -f "${boot}/device-init.yaml" ]; then
	  echo "Setting device-init"
	  if [ ! -z "${SD_HOSTNAME}" ]; then
	    echo "  Set hostname=${SD_HOSTNAME}"
	    sed -i -e "s/.*hostname:.*\$/hostname: ${SD_HOSTNAME}/" "${boot}/device-init.yaml"
	  fi
	  if [ ! -z "${WIFI_SSID}" ]; then
	    echo "  Set wlan0/ssid=${WIFI_SSID}"
	    sudo sed -i -e "s/.*wlan0:.*\$/    wlan0:/" "${boot}/device-init.yaml"
	    sudo sed -i -e "s/.*ssid:.*\$/      ssid: \"${WIFI_SSID}\"/" "${boot}/device-init.yaml"
	  fi
	  if [ ! -z "${WIFI_PASSWORD}" ]; then
	    echo "  Set wlan0/password=${WIFI_PASSWORD}"
	    sudo sed -i -e "s/.*wlan0:.*\$/    wlan0:/" "${boot}/device-init.yaml"
	    sudo sed -i -e "s/.*password:.*\$/      password: \"${WIFI_PASSWORD}\"/" "${boot}/device-init.yaml"
	  fi
	  if [ ! -z "${CLUSTERLAB}" ]; then
	    echo "  Set Cluster-Lab/run_on_boot=${CLUSTERLAB}"
	    sudo sed -i -e "s/.*run_on_boot.*\$/    run_on_boot: \"${CLUSTERLAB}\"/" "${boot}/device-init.yaml"
	  fi
	fi

	# legacy: /boot/occidentalis.txt of old Hector release
	if [ -f "${boot}/occidentalis.txt" ]; then
	  echo "Setting Occidentalis"
	  if [ ! -z "${SD_HOSTNAME}" ]; then
	    echo "  Set hostname=${SD_HOSTNAME}"
	    sudo sed -i -e "s/.*hostname.*=.*\$/hostname=${SD_HOSTNAME}/" "${boot}/occidentalis.txt"
	  fi
	  if [ ! -z "${WIFI_SSID}" ]; then
	    echo "  Set wifi_ssid=${WIFI_SSID}"
	    sudo sed -i -e "s/.*wifi_ssid.*=.*\$/wifi_ssid=${WIFI_SSID}/" "${boot}/occidentalis.txt"
	  fi
	  if [ ! -z "${WIFI_PASSWORD}" ]; then
	    echo "  Set wifi_password=${WIFI_PASSWORD}"
	    sudo sed -i -e "s/.*wifi_password.*=.*\$/wifi_password=${WIFI_PASSWORD}/" "${boot}/occidentalis.txt"
	  fi
	fi
	umount $boot
}

new_image=$(generate_copy "${image}" "${hostname}")
echo ">>> renamed copy generated"
customize_boot_config "${new_image}" "${hostname}"
echo ">>> boot config updated with container name"
prepare_for_qemu $new_image
echo ">>> system conf adapted to qemu subtelties"
echo resize_img to $size in $new_image
resize_img $new_image $size
if [[ $? -eq 0 ]]; then
	echo ">>> Image extended to $size"
	expand_partition2 $new_image
	echo ">>> Partition table updated to new size"
	check_partition2_filesystem $new_image
	echo ">>> Filesystem checked"
	expand_partition2_filesystem $new_image
	echo ">>> Filesystem updated to new partition size"
else
	echo "(no change to filesystem required)"
fi
echo ">>> Resulting image is ${new_image}"