#!/bin/bash

errcho() {
	>&2 echo $*
}

usage()
{
  cat << EOF
 Usage: $0 -s SIZE -i IMAGE -n HOSTNAME [-t TARGET_DIR]
  -n HOSTNAME   set hostname for this SD image
  -i IMAGE      original image to use for cloning and preparation
  -s SIZE       final size of image

Customize and expand a Hypriot image to run under qemu

OPTIONS:
  -t TARGET_DIR directory to store generated image
  -h            show this message
  -x            override existing image if exists
  
EOF
  exit 1
}

OVERWRITE=false

while getopts "hs:i:n:t:x" opt; do
  case $opt in
    i)  image="$OPTARG" ;;
    s)  size="$OPTARG" ;;
	n)	hostname="$OPTARG" ;;
	t)	TARGET_DIR="$OPTARG" ;;
	x)  OVERWRITE=true ;;
	h) 	usage ;;
    \? ) errcho "Unknown option: -$OPTARG" >&2; exit 1;;
    :  ) errcho "Missing option argument for -$OPTARG" >&2; exit 1;;
    *  ) errcho "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done

#shift $(($OPTIND - 1))

if [ "$image" == "" ] #&& [[ -d $1 ]]
then
    errcho "source image must be defined (use -i ...)" >&2
    usage
fi

if [[ "$size" == "" ]]
then
    errcho "size  must be defined (use -s ...)" >&2
    usage
fi

if [[ "$hostname" == "" ]]
then
    errcho "hostname must be defined (use -n ...)" >&2
    usage
fi

if [[ "$TARGET_DIR" == "" ]]
then
    TARGET_DIR=$(realpath $(dirname ${image}))
fi

if [ ! -f ${image} ]; then
	errcho "Source image file \"$image\" does not exist"
	usage
fi

function generate_name(){
	image=$1
	container_name=$2
	filename=$(basename "$1")
	extension="${filename##*.}"
	filename="${filename%.*}"
	echo ${TARGET_DIR}/${filename}-${container_name}.${extension}
}

function copy_with_progress(){ 
	#kknowningly not using fancy progress bar from rsync or pv to rely on barebone utils from ubuntu docker container
	cp $1 $2 
}

# size=$(numfmt --from=iec ${size})

function resize_img(){
	CUR_SIZE=$(stat -c%s $1)
	size=$(numfmt --from=iec $2)
	errcho resizing $1 to $size
	if [ $CUR_SIZE -ge $size ]; then 
		errcho "original size ${CUR_SIZE}, already >= $2, no need expand"
		false
	else
		truncate --size=$2 $1
	fi
}

function expand_partition2(){
	fdisk $1 <<-EOF
d
2
n







w
EOF

}

function check_partition2_filesystem(){
	dev=$(loop_sda2_from_img $1)
	e2fsck -fp $dev
	unloop_sda2_from_img $dev
}

function expand_partition2_filesystem(){
	dev=$(loop_sda2_from_img $1)
	resize2fs $dev
	unloop_sda2_from_img $dev
}

function loop_sda2_from_img(){
	IMAGE=$1
	extension="${IMAGE##*.}"
	PART2_OFFSET=$(fdisk -l $IMAGE | grep ${extension}2 | awk '{ print $2}')
	PART2_OFFSET=$(( $PART2_OFFSET * 512 ))
	echo $(losetup --find  --show -o $PART2_OFFSET $IMAGE)
}

function unloop_sda2_from_img(){
	losetup -d $1
}

function loop_boot_from_img(){
	IMAGE=$1
	extension="${IMAGE##*.}"
	PART1_OFFSET=$(fdisk -l $IMAGE | grep ${extension}1 | awk '{ print $2}')
	PART1_OFFSET=$(( $PART1_OFFSET * 512 ))
	echo $(losetup --find  --show -o $PART1_OFFSET $IMAGE)
}

function unloop_boot_from_img(){
	losetup -d $1
}

function prepare_for_qemu(){
	# unloop_sda2_from_img /dev/loop0 > /dev/null 2>&1
	dev=$(loop_sda2_from_img $1)
	
	sda2=/tmp/mnt_sda2.$$
	# dev=/dev/loop1
	mkdir -p ${sda2}
	mount ${dev} ${sda2}
	
	# Remove original preload file
	if [ -f $sda2/etc/ld.so.preload ]; then
		cp $sda2/etc/ld.so.{,.old}
		sed -i -e 's/^/#/' $sda2/etc/ld.so.preload
	fi

	cp $sda2/etc/modules-load.d/modules.conf{,.old}
	sed -i -e 's/^snd_bcm/#snd_bcmx/' $sda2/etc/modules-load.d/modules.conf
	
	mkdir -p $sda2/etc/udev/rules.d/
	touch $sda2/etc/udev/rules.d/90-qemu.rules
	echo 'KERNEL=="sda", SYMLINK+="mmcblk0"' >> $sda2/etc/udev/rules.d/90-qemu.rules
	echo 'KERNEL=="sda?", SYMLINK+="mmcblk0p%n"' >> $sda2/etc/udev/rules.d/90-qemu.rules
	echo 'KERNEL=="sda2", SYMLINK+="root"' >> $sda2/etc/udev/rules.d/90-qemu.rules

	umount $sda2
	unloop_sda2_from_img $dev
}

function customize_boot_config(){
	img=$1
	hostname=$2
	SD_HOSTNAME=$hostname
	dev=$(loop_boot_from_img "${img}")
	
	boot=/tmp/mnt_boot.$$
	mkdir -p $boot
	# FS_TYPE=$(sudo blkid -o value -s TYPE "${dev}" || errcho vfat)
	# mount -t ${FS_TYPE} "${dev}" "${boot}"
	mount "${dev}" "${boot}"

	if [ ! $? ]; then
		errcho somthing went wrong, aborting
		exit 2
	fi

	if [ -f "${boot}/device-init.yaml" ]; then
	  errcho "Setting device-init"
	  if [ ! -z "${SD_HOSTNAME}" ]; then
	    errcho "  Set hostname=${SD_HOSTNAME}"
	    sed -i -e "s/.*hostname:.*\$/hostname: ${SD_HOSTNAME}/" "${boot}/device-init.yaml"
	  fi
	  if [ ! -z "${WIFI_SSID}" ]; then
	    errcho "  Set wlan0/ssid=${WIFI_SSID}"
	    sudo sed -i -e "s/.*wlan0:.*\$/    wlan0:/" "${boot}/device-init.yaml"
	    sudo sed -i -e "s/.*ssid:.*\$/      ssid: \"${WIFI_SSID}\"/" "${boot}/device-init.yaml"
	  fi
	  if [ ! -z "${WIFI_PASSWORD}" ]; then
	    errcho "  Set wlan0/password=${WIFI_PASSWORD}"
	    sudo sed -i -e "s/.*wlan0:.*\$/    wlan0:/" "${boot}/device-init.yaml"
	    sudo sed -i -e "s/.*password:.*\$/      password: \"${WIFI_PASSWORD}\"/" "${boot}/device-init.yaml"
	  fi
	  if [ ! -z "${CLUSTERLAB}" ]; then
	    errcho "  Set Cluster-Lab/run_on_boot=${CLUSTERLAB}"
	    sudo sed -i -e "s/.*run_on_boot.*\$/    run_on_boot: \"${CLUSTERLAB}\"/" "${boot}/device-init.yaml"
	  fi
	fi

	# legacy: /boot/occidentalis.txt of old Hector release
	if [ -f "${boot}/occidentalis.txt" ]; then
	  errcho "Setting Occidentalis"
	  if [ ! -z "${SD_HOSTNAME}" ]; then
	    errcho "  Set hostname=${SD_HOSTNAME}"
	    sudo sed -i -e "s/.*hostname.*=.*\$/hostname=${SD_HOSTNAME}/" "${boot}/occidentalis.txt"
	  fi
	  if [ ! -z "${WIFI_SSID}" ]; then
	    errcho "  Set wifi_ssid=${WIFI_SSID}"
	    sudo sed -i -e "s/.*wifi_ssid.*=.*\$/wifi_ssid=${WIFI_SSID}/" "${boot}/occidentalis.txt"
	  fi
	  if [ ! -z "${WIFI_PASSWORD}" ]; then
	    errcho "  Set wifi_password=${WIFI_PASSWORD}"
	    sudo sed -i -e "s/.*wifi_password.*=.*\$/wifi_password=${WIFI_PASSWORD}/" "${boot}/occidentalis.txt"
	  fi
	fi
	umount $boot
	unloop_boot_from_img $dev
}

new_image=$(generate_name "${image}" "${hostname}")
errcho ">>> target will be ${new_image}"

if [ -f ${new_image} ] ; then
    if [ "$OVERWRITE" = false ] ; then
		errcho "destinaton exist, using it as is"
	else 
		errcho "copying source image to destination"
		copy_with_progress "${image}" "${new_image}"
		errcho ">>> target copy ${new_image} generated (forced by -x option)"
	fi
else
	copy_with_progress "${image}" "${new_image}"
	errcho ">>> target ${new_image} generated"
fi

customize_boot_config "${new_image}" "${hostname}"
errcho ">>> boot config updated with container name"

prepare_for_qemu $new_image
errcho ">>> system conf adapted to qemu subtelties"

errcho resize_img to $size in $new_image
resize_img $new_image $size

if [[ $? -eq 0 ]]; then
	errcho ">>> Image extended to $size"
	expand_partition2 $new_image
	errcho ">>> Partition table updated to new size"
	check_partition2_filesystem $new_image
	errcho ">>> Filesystem checked"
	expand_partition2_filesystem $new_image
	errcho ">>> Filesystem updated to new partition size"
else
	errcho "(no change to filesystem required)"
fi
errcho ">>> Resulting image is ${new_image}"
echo ${new_image}
